Primer Codigo 00 Hello
print("Hello World! \n")
 
print("Hold on now, don't print me yet!")
 
print([x for x in 4:8])
print([x * 2 for x in 4:8])
 
xs = [8,6,4,2,0]
 
xs[1:3]
xs[4:end]
xs[1:2:end]
xs[end:-2:1]
 
# Listas
print("\n--------Listas")
my_list = ['a', 1, -0.76,6,6,6,6,(88,9)]
print("\n")
 
 
my_list[2] + my_list[3]
 
my_list[1] # primer elemento
#my_list[0] # error
 
#Indice especial para el último indice
my_list[end] # último elemento de la lista
my_list[end - 1] # penúltimo
#Largo de la lista
length(my_list)
 
primer_matriz =  [[1,2,3],[1,2,3],[1,2,3]]
 
 
print("\n--------Ciclos For")
#Ejecuta un bloque de código varias veces
#Uso común iterar sobre un rango
for i in 1:10
    println(i)
end
 
println("=========Rotar una matriz")
# Definir la matriz original
matriz_original = [1 2 3 4 5]
 
# Definir la matriz rotada
matriz_rotada = zeros(Int, 5)
 
# Realizar la rotación
for i in 1:5
    matriz_rotada[i] = matriz_original[mod(i + 1, 5) + 1]
end
 
# Imprimir la matriz original y la matriz rotada
println("Matriz original: ", matriz_original)
println("Matriz rotada: ", matriz_rotada)
 
 
length_of_list = length(matriz_original)
 
 
 
println("\n--------------Matriz aleatoria")
# Generar una matriz aleatoria de 5 elementos
matriz_original_aleatoria = rand(1:100, 5)
 
# Definir la matriz rotada
matriz_rotada = zeros(Int, 5)
 
# Realizar la rotación
for i in 1:5
    matriz_rotada[i] = matriz_original_aleatoria[mod(i + 1, 5) + 1]
end
 
# Imprimir la matriz original y la matriz rotada
println("Matriz original aleatoria: ", matriz_original_aleatoria)
println("Matriz rotada: ", matriz_rotada)

# help(sin)

trunc(Int64, 3.99999)

#?cos
 
cos(fill(1.0, (2,2)))
 
print("Funcion de truncar 3.9999: ",trunc(Int64, 3.99999))
 
print("\nConvertir un número a una cadena:")
string(3.14159)

println("Funciones matematicas")
potencia_de_señal=10.000045
potencia_de_ruido =0.00007789
proporción = potencia_de_señal/potencia_de_ruido
decibelios = 10*log10(proporción)
println(decibelios)
 
 
radianes = 0.7
altura = sin(radianes)
 
println("Altrua: ", altura)

grados = 45
radianes = grados/180*π
rs = sin(radianes)
println("Seno del radio: ",rs)
 
raiz_cuadrada = sqrt(2)/ 2
println("Raíz cuadrada de 2: ",rs)





Segundo Codigo 02 function tiempo
using Pkg
Pkg.add(["Plots", "StatsBase"])
using Plots
function fib_pr(n)
    if n == 0
        return 0
    elseif n == 1
        return 1
    else
        return fib_pr(n-1) + fib_pr(n-2)
    end
end
 
anteriores = Dict(0 => 0, 1 => 1)
 
function fibonacci_pd(n)
    if n ∈ keys(anteriores)
        return anteriores[n]
    end
    res = fibonacci_pd(n - 1) + fibonacci_pd(n - 2)
    anteriores[n] = res
    return res
end
 
 
 
 
#fib_pr(1)
#fibonacci_pd(1)
 
#print("Programacion Recursiva: ",@time fib_pr(40))
print("Programacion Dinamica: ",@time fibonacci_pd(40))
 
 
 
 
# Definir una función para medir el tiempo de ejecución
function tiempo_ejecucion(f, args...)
    t0 = time()
    f(args...)
    return time() - t0
end
 
# Definir la función fibonacci_pd corregida
anteriores = Dict(0 => 0, 1 => 1)
function fibonacci_pd(n)
    if n ∈ keys(anteriores)
        return anteriores[n]
    end
    res = fibonacci_pd(n - 1) + fibonacci_pd(n - 2)
    anteriores[n] = res
    return res
end
 
# Calcular los tiempos de ejecución para diferentes valores de n
n_vals = 1:30
tiempos = [tiempo_ejecucion(fibonacci_pd, n) for n in n_vals]
 
# Graficar los tiempos de ejecución
plot(n_vals, tiempos, xlabel="n", ylabel="Tiempo de ejecución (segundos)",
     label="fibonacci_pd", marker=true)






Tercer Codigo Matrices Tiempo
using Plots
 
# Función para generar una matriz aleatoria y medir el tiempo de ejecución
function generar_matriz_y_medir_tiempo(dim)
    tiempo = @elapsed begin
        matriz = rand(dim, dim)
    end
    return tiempo
end
 
# Tamaños de las matrices
tamaños = [10, 50, 100, 200, 300,  500, 800, 1000, 2000, 3000, 5000, 10000, 12000]
 
# Generar matrices y medir tiempos
tiempos = [generar_matriz_y_medir_tiempo(tamaño) for tamaño in tamaños]
 
# Graficar los tiempos
scatter(tamaños, tiempos, xlabel="Tamaño de la matriz", ylabel="Tiempo de creación (segundos)",
        title="Tiempo de creación de matrices aleatorias")
